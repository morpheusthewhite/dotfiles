#! /bin/sh

##########################################
# declaration of needed functions
##########################################

# handle setup of workspace (both in case of single and double monitor)
function setup_workspaces_monitor_polybar(){
	other_monitor=$(xrandr -q | awk -v primary_monitor="$primary_monitor" '{if($2=="connected" && $1!=primary_monitor) {print $1}}' )

    if [ ! -z "${primary_resolution}"  ]; then
        # this needs to be an array to be correctly parsed by the command
        primary_monitor_mode=( --mode "${primary_resolution}" )
    fi

	if [ -z "${other_monitor}" -o "$disable_dual" == "true" ] 
    then
		echo "Single monitor"

        xrandr --output "${primary_monitor}" --primary "${primary_monitor_mode[@]}"
		bspc monitor -d I II III IV V VI VII VIII IX 
	else
		echo "Double monitor"

        if [ ! -z "${secondary_resolution}"  ]; then
            # this needs to be an array to be correctly parsed by the command
            other_monitor_mode=( --mode "${secondary_resolution}" )
        fi

        if [ "$secondary_right" == "false" ]
            then
		    xrandr --output "${primary_monitor}" --primary "${primary_monitor_mode[@]}" --output "${other_monitor}" "${other_monitor_mode[@]}" --left-of "${primary_monitor}"

            # needed when the second monitor is on the left
            bspc monitor "${other_monitor}" -s "${primary_monitor}"
        else 
		    xrandr --output "${primary_monitor}" --primary "${primary_monitor_mode[@]}" --output "${other_monitor}" "${other_monitor_mode[@]}" --right-of "${primary_monitor}"
        fi

        bspc monitor "${primary_monitor}" -d I II III IV V
		bspc monitor "${other_monitor}" -d VI VII VIII IX
        
	fi
}

# retrieve colors from xresources; run it after `wal`
fetch_colors () {
	FOREGROUND=$(xrdb -query | grep '*.foreground:'| awk '{print $NF}')
	BACKGROUND=$(xrdb -query | grep '*.background:'| awk '{print $NF}')
	BLACK=$(xrdb -query | grep '*.color0:'| awk '{print $NF}')
	RED=$(xrdb -query | grep '*.color1:'| awk '{print $NF}')
	GREEN=$(xrdb -query | grep '*.color2:'| awk '{print $NF}')
	YELLOW=$(xrdb -query | grep '*.color3:'| awk '{print $NF}')
	BLUE=$(xrdb -query | grep '*.color4:'| awk '{print $NF}')
	MAGENTA=$(xrdb -query | grep '*.color5:'| awk '{print $NF}')
	CYAN=$(xrdb -query | grep '*.color6:'| awk '{print $NF}')
	WHITE=$(xrdb -query | grep '*.color7:'| awk '{print $NF}')
}

##########################################

# load configuration
source "$HOME"/.config/bspwm/bspwm.conf

setup_workspaces_monitor_polybar

/usr/lib/pam_kwallet_init &
sxhkd &
picom &
feh --bg-max /home/francesco/Pictures/Wallpapers/house_forest_pixel.jpg
wal --theme base16-gruvbox-hard
# set keymap options
setxkbmap -layout it -variant us &

dunst &
~/.config/polybar/launch.sh &
# source "/home/francesco/.cache/wal/colors.sh"
wmname LG3D &
pgrep bspswallow || "$HOME"/.config/bspwm/scripts/bspswallow & # window swallowing

enable_fn
fetch_colors

#bspc config normal_border_color "$BLACK"
bspc config focused_border_color "$YELLOW"
#bspc config active_border_color "$BLUE"
bspc config urgent_border_color $color1
bspc config presel_feedback_color $color7

bspc config border_width             1
bspc config top_padding              22
bspc config bottom_padding           0
bspc config left_padding             0
bspc config right_padding            0
bspc config window_gap               9

bspc config split_ratio          0.52
bspc config borderless_monocle   true
bspc config gapless_monocle      true
bspc config paddingless_monocle  true
# this should correspond to the height of the bar in order not to show it in monocle
bspc config top_monocle_padding  -28

bspc rule -a Gimp desktop='^8' state=floating follow=on
bspc rule -a mplayer2 state=floating
bspc rule -a Screenkey manage=off
bspc rule -a feh state=floating
bspc rule -a "TelegramDesktop" desktop='^5' follow=on
bspc rule -a "Mailspring" desktop='^4' follow=on
bspc rule -a "Slack" desktop='^4' follow=on
bspc rule -a Zathura state=tiled
bspc config external_rules_command "$HOME/.config/bspwm/scripts/spotify_external_rule"
